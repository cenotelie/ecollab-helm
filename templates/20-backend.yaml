kind: Deployment
apiVersion: apps/v1
metadata:
  name: backend-postgres
  labels:
    app: backend-postgres

spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend-postgres
  template:
    metadata:
      labels:
        app: backend-postgres
    spec:
      volumes:
        - name: backend-data
          hostPath:
            path: /data/backend-pg
      containers:
        - name: backend-postgres
          image: postgres:alpine
          ports:
            - name: sql
              containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: "backend"
            - name: POSTGRES_PASSWORD
              value: "backend"
            - name: POSTGRES_DB
              value: "backend"
          volumeMounts:
            - mountPath: "/var/lib/postgresql/data"
              name: backend-data

---

apiVersion: v1
kind: Service
metadata:
  name: backend-postgres
spec:
  ports:
    - protocol: TCP
      name: sql
      port: 5432
      targetPort: 5432
  selector:
    app: backend-postgres

---

kind: Deployment
apiVersion: apps/v1
metadata:
  name: backend-minio
  labels:
    app: backend-minio

spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend-minio
  template:
    metadata:
      labels:
        app: backend-minio
    spec:
      volumes:
        - name: backend-miniodata
          hostPath:
            path: /data/backend-minio
      containers:
        - name: backend-minio
          image: minio/minio:latest
          args: ["server", "/data"]
          ports:
            - name: s3
              containerPort: 9000
          env:
            - name: MINIO_ACCESS_KEY
              value: "AKIAIOSFODNN7EXAMPLE"
            - name: MINIO_SECRET_KEY
              value: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
          volumeMounts:
            - mountPath: "/data"
              name: backend-miniodata

---

apiVersion: v1
kind: Service
metadata:
  name: backend-minio
spec:
  ports:
    - protocol: TCP
      name: s3
      port: 9000
      targetPort: 9000
  selector:
    app: backend-minio

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: backend
  labels:
    app: backend

spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      volumes:
        - name: backend-data
          hostPath:
            path: /data/backend
      serviceAccountName: auto-deployer
      imagePullSecrets:
      - name: ecollab-registry
      containers:
        - name: backend
          image: "rg.fr-par.scw.cloud/ecollab/backend:{{ .Values.versions.backend }}"
          ports:
            - name: http
              containerPort: 8080
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "prod"
            - name: DB_URL
              value: "r2dbc:postgresql://backend-postgres.default.svc.cluster.local/backend"
            - name: KEYCLOAK_URL
              value: "{{ .Values.rootUri }}/auth"
            - name: KEYCLOAK_REALM
              value: "activiti"
            - name: KEYCLOAK_CLIENT
              value: "ecollab"
            - name: S3_ENDPOINT
              value: "http://backend-minio.default.svc.cluster.local:9000"
            - name: S3_ACCESS_KEY
              value: "AKIAIOSFODNN7EXAMPLE"
            - name: S3_PRIVATE
              value: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
            - name: ES_URL
              value: "http://elasticsearch.default.svc.cluster.local:9200"
            - name: RABBITMQ_HOST
              value: "rabbitmq.default.svc.cluster.local"
            - name: KAFKA_URL
              value: "kafka-broker.default.svc.cluster.local:9092"
            - name: REDIS_HOST
              value: "redis.default.svc.cluster.local"
            - name: BLAZEGRAPH_URL
              value: "http://blazegraph.default.svc.cluster.local:8080/bigdata/namespace/kb/sparql"
          volumeMounts:
            - mountPath: "/data"
              name: backend-data
      initContainers:
        - name: check-elasticsearch
          image: appropriate/curl:latest
          command:
          - sh
          - -c
          - |
            until curl http://elasticsearch.default.svc.cluster.local:9200; do
              echo "Waiting for Elasticsearch..."
              sleep 10
            done

---
apiVersion: v1
kind: Service
metadata:
  name: backend
spec:
  ports:
    - protocol: TCP
      name: http
      port: 8080
      targetPort: 8080
  selector:
    app: backend
